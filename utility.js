function getCachedData(fileName = "vidget.json"){
  const cache = CacheService.getScriptCache();
  let cachedPage = cache.get(fileName);

  if (!cachedPage) {
    Logger.log("‚ùå –î–∞–Ω–Ω—ã—Ö " + fileName + " –≤ –∫—ç—à–µ –Ω–µ—Ç, –±–µ—Ä—ë–º –∏–∑ Google Drive...");
    cachedPage = loadFileFromDrive(fileName);
    // –ó–∞–ø—É—Å–∫–∞–µ–º updateCacheAndFile() –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —á–µ—Ä–µ–∑ —Ç—Ä–∏–≥–≥–µ—Ä
    const trigger = ScriptApp.newTrigger("updateCacheAndFile")
      .timeBased()
      .after(7000) // –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ .. –º—Å
      .create();

    addTriggerToIds(trigger.getUniqueId());
    Logger.log(`trigger —Å–æ–∑–¥–∞–Ω ID: ${trigger.getUniqueId()}`);
  } else {
    Logger.log("‚úÖ –ó–∞–≥—Ä—É–∑–∏–ª–∏ –≤–∏–¥–∂–µ—Ç –∏–∑ –∫—ç—à–∞");
  }

  Logger.log(`getCachedData() –ø–æ–ª—É—á–∏–ª ${fileName} ${cachedPage.slice(0,100)} ...`);
  return cachedPage;
}

function addTriggerToIds(id) {
  const props = PropertiesService.getScriptProperties();
  const raw = props.getProperty('TRIGGER_IDS') || '[]';
  const ids = JSON.parse(raw);
  ids.push(id);
  props.setProperty('TRIGGER_IDS', JSON.stringify(ids));
}

function removeAllTriggersInIDs() {
  const props = PropertiesService.getScriptProperties();
  const raw = props.getProperty('TRIGGER_IDS');
  if (!raw) return;

  const storedIds = new Set(JSON.parse(raw));
  const triggers = ScriptApp.getProjectTriggers();
  Logger.log(`—Ç—Ä–∏–≥–≥–µ—Ä—ã –∏–∑ IDs: ${JSON.stringify(Array.from(storedIds))}`);

  for (const trigger of triggers) {
    const id = trigger.getUniqueId();
    if (storedIds.has(id)) {
      Logger.log(`–£–¥–∞–ª—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä ID: ${id}`);
      ScriptApp.deleteTrigger(trigger);
      storedIds.delete(id);
    }
  }

Logger.log(" –≤ IDs –æ—Ç—Å—Ç–∞–ª–æ—Å—å: " + JSON.stringify(Array.from(storedIds)));

  props.setProperty('TRIGGER_IDS', JSON.stringify(Array.from(storedIds)));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ZAG - –≥–µ–Ω–µ—Ä–∞—Ü—ã–∏ HTML/JSON –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è HTML/JSON –≤ –∫–µ—à
async function updateCacheAndFile() {
  const fileName = "vidget.json";
  Logger.log(`updateCacheAndFile(${fileName} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å = "vidget.json") )`);
  removeAllTriggersInIDs();
  
  const lock = LockService.getScriptLock();
  if (lock.tryLock(0)) {
    try {
      // –ó–¥–µ—Å—å —Ä–∞–∑–º–µ—â–∞–µ–º –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
//      UpdateTableFromZAG();
      Logger.log(" UpdateTableFromZAG() –ø—Ä–æ—à–µ–ª");
              const jsondata = await generateJsonData();
              const jsonString = JSON.stringify(jsondata);
              Logger.log("JSON —Å–æ–∑–¥–∞–Ω.");
              saveDataToCacheAndFile(jsonString, fileName);
    } finally {
      lock.releaseLock();
    }
  } else {
    Logger.log("üî∏ –§—É–Ω–∫—Ü–∏—è updateCacheAndFile() —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è ==>> –ø—Ä–æ–ø—É—Å–∫–∞–µ–º!");
  }
}
 

function saveDataToCacheAndFile(data, fileName){
  Logger.log(`saveDataToCacheAndFile(${data.slice(0,50)}, ${fileName} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å = "vidget.json") )`);
  const cache = CacheService.getScriptCache();
  try {
    cache.put(fileName, data, 7200); // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø–∏—Å–∞—Ç—å // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    const cachedValue = cache.get(fileName); // –°—Ä–∞–∑—É —á–∏—Ç–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    if (cachedValue === data) {
      Logger.log("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –∫—ç—à! key: " + fileName);
    } else {
      Logger.log("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ –∫—ç—à (–≤–æ–∑–º–æ–∂–Ω–æ, –∏—Å—Ç—ë–∫ TTL –∏–ª–∏ –∫—ç—à –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω). key: " + fileName);
    }
  } catch (e) {
    Logger.log("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∫—ç—à–µ–º: " + e.message);
  }
  saveFileToDrive(data, fileName);
}

// —á–∏—Å—Ç–∏–º holiday
function clearHolidayCache() { 
  const prop = PropertiesService.getScriptProperties();
  const keys = prop.getKeys();
  keys.forEach((key) => {if (key.startsWith('holidays')){ prop.deleteProperty('holidays')}});
  console.log("Holiday –∫—ç—à –≤ PropertiesService –±—ã–ª –æ—á–∏—â–µ–Ω");
}


function saveFileToDrive(data, fileName) {
  Logger.log(`saveFileToDrive(${data.slice(0,50)}, ${fileName} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å = "vidget.json") )`);
  const files = DriveApp.getFilesByName(fileName);
  const file = files.hasNext() ? files.next().setContent(data) : DriveApp.createFile(fileName, data, MimeType.PLAIN_TEXT);
  if (file) {
    Logger.log(file.getName() + " —Å–æ—Ö—Ä–∞–Ω—ë–Ω –Ω–∞ –¥–∏—Å–∫.‚úÖ" + " —Ä–∞–∑–º–µ—Ä " + file.getSize());
    Logger.log("—Å–æ–∑–¥–∞–Ω " + file.getDateCreated() + "–∏–∑–º–µ–Ω—ë–Ω " + file.getLastUpdated());
  }else Logger.log("–ù–µ –≤—ã—à–ª–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å ‚ùå" + fileName + " –Ω–∞ –¥–∏—Å–∫! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!");
  return file.getId();
}


function loadFileFromDrive(fileName) {
  const files = DriveApp.getFilesByName(fileName);
  let result = files.hasNext() ? files.next().getBlob().getDataAsString() : 'File not found';
  Logger.log(fileName + " –∑–∞–≥—Ä—É–∂–µ–Ω —Å –¥–∏—Å–∫–∞.");
  return result;
}